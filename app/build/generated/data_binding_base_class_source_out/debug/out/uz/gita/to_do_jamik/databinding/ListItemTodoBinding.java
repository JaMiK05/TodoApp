// Generated by view binder compiler. Do not edit!
package uz.gita.to_do_jamik.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.CheckBox;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import uz.gita.to_do_jamik.R;

public final class ListItemTodoBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final CheckBox rbTodo;

  @NonNull
  public final TextView tvCategoryTask;

  @NonNull
  public final TextView tvNameTodo;

  @NonNull
  public final TextView tvTimeTodo;

  @NonNull
  public final LinearLayout updateTask;

  private ListItemTodoBinding(@NonNull ConstraintLayout rootView, @NonNull CheckBox rbTodo,
      @NonNull TextView tvCategoryTask, @NonNull TextView tvNameTodo, @NonNull TextView tvTimeTodo,
      @NonNull LinearLayout updateTask) {
    this.rootView = rootView;
    this.rbTodo = rbTodo;
    this.tvCategoryTask = tvCategoryTask;
    this.tvNameTodo = tvNameTodo;
    this.tvTimeTodo = tvTimeTodo;
    this.updateTask = updateTask;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ListItemTodoBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ListItemTodoBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.list_item_todo, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ListItemTodoBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.rb_todo;
      CheckBox rbTodo = ViewBindings.findChildViewById(rootView, id);
      if (rbTodo == null) {
        break missingId;
      }

      id = R.id.tv_category_task;
      TextView tvCategoryTask = ViewBindings.findChildViewById(rootView, id);
      if (tvCategoryTask == null) {
        break missingId;
      }

      id = R.id.tv_name_todo;
      TextView tvNameTodo = ViewBindings.findChildViewById(rootView, id);
      if (tvNameTodo == null) {
        break missingId;
      }

      id = R.id.tv_time_todo;
      TextView tvTimeTodo = ViewBindings.findChildViewById(rootView, id);
      if (tvTimeTodo == null) {
        break missingId;
      }

      id = R.id.updateTask;
      LinearLayout updateTask = ViewBindings.findChildViewById(rootView, id);
      if (updateTask == null) {
        break missingId;
      }

      return new ListItemTodoBinding((ConstraintLayout) rootView, rbTodo, tvCategoryTask,
          tvNameTodo, tvTimeTodo, updateTask);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
